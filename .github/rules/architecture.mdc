description: Rules for maintainable, scalable software architecture and modular design.
globs: "*"
alwaysApply: true

Layered separation: Clearly separate presentation, domain, data, and integration layers.

Define boundaries: Use clean module boundaries and interfaces; follow Dependency Inversion.

Favor composition over inheritance: Leverage component composition or IoC patterns instead of deep inheritance.

Apply SOLID principles: S, O, L, I, D at every code level.

Event-driven integration: Use asynchronous messaging / pub-sub in microservices.

Boundary as anti-corruption layer: Protect core logic from external changes.

Scale via modules or services: Organize code by domains; enable independent deployments.

Avoid cyclic dependencies: Enforce acyclic dependencies between modules/packages.

Define context via consistent packages: Each service/feature has its own namespace.

Document architecture patterns: Use ADRs to record chosen approaches (hexagonal, layered, event-driven).